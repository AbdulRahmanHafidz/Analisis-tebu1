from django.db import models

# tabel koreksi suhu
KOREKSI_SUHU = {
    20: -0.46,
    21: -0.41,
    22: -0.36,
    23: -0.30,
    24: -0.24,
    25: -0.18,
    26: -0.11,
    27: -0.05,
    27.5: 0,
    28: 0.02,
    29: 0.09,
    30: 0.16,
    31: 0.23,
    32: 0.31,
    33: 0.39,
    34: 0.47,
    35: 0.55,
    36: 0.63,
    37: 0.71,
    38: 0.80,
    39: 0.89,
    40: 0.98,
}

def get_koreksi_suhu(suhu: float) -> float:
    """Interpolasi linear untuk koreksi suhu"""
    suhu_list = sorted(KOREKSI_SUHU.keys())

    if suhu in KOREKSI_SUHU:
        return KOREKSI_SUHU[suhu]
    if suhu <= suhu_list[0]:
        return KOREKSI_SUHU[suhu_list[0]]
    if suhu >= suhu_list[-1]:
        return KOREKSI_SUHU[suhu_list[-1]]

    for i in range(len(suhu_list) - 1):
        low, high = suhu_list[i], suhu_list[i + 1]
        if low <= suhu <= high:
            koreksi_low = KOREKSI_SUHU[low]
            koreksi_high = KOREKSI_SUHU[high]
            return round(
                koreksi_low + (suhu - low) * (koreksi_high - koreksi_low) / (high - low),
                3
            )
    return 0.0

def get_ukuran_brix(brix: float) -> float:
    """Interpolasi linear untuk ukuran brix dari BrixData"""
    brix_list = sorted(BrixData.keys())

    if brix in BrixData:
        return BrixData[brix]
    if brix <= brix_list[0]:
        return BrixData[brix_list[0]]
    if brix >= brix_list[-1]:
        return BrixData[brix_list[-1]]

    for i in range(len(brix_list) - 1):
        low, high = brix_list[i], brix_list[i + 1]
        if low <= brix <= high:
            sg_low = BrixData[low]
            sg_high = BrixData[high]
            return round(
                sg_low + (brix - low) * (sg_high - sg_low) / (high - low),
                5
            )
    return 0.0



class AnalisaTebu(models.Model):
    tanggal = models.DateTimeField(auto_now_add=True)
    brix = models.FloatField()
    pol = models.FloatField()
    suhu = models.FloatField()
    ph = models.FloatField(null=True, blank=True)

    @property
    def brix_koreksi(self):
        koreksi = get_koreksi_suhu(self.suhu)
        return round(self.brix + koreksi, 2)
    


    @property
    def pol_rata2(self):
        ukuran_brix = get_ukuran_brix(self.brix)
        if ukuran_brix > 0:
            return (self.pol * 0.286) / ukuran_brix
        return 0

    @property
    def hk(self):
        if self.brix_koreksi > 0:
            return round((self.pol_rata2 / self.brix_koreksi) *100 , 2)
        return 0

    @property
    def nn(self):
        return round((self.pol_rata2) - ( 0.4*(self.brix_koreksi - self.pol_rata2) ), 2)

    # Field ph sudah tersedia, tidak perlu property lagi

    def __str__(self):
        return f"Analisa {self.tanggal} - HK: {self.hk}%"

    @property
    def rendemen(self):
        if self.hk > 0:
            return round((self.nn * 0.68) , 2)
        return 0


BrixData = {
    0.1: 0.99678,
    0.2: 0.99717,
    0.3: 0.99755,
    0.4: 0.99794,
    0.5: 0.99832,
    0.6: 0.99871,
    0.7: 0.99910,
    0.8: 0.99948,
    0.9: 0.99987,
    1.0: 1.00026,
    1.1: 1.00064,
    1.2: 1.00103,
    1.3: 1.00142,
    1.4: 1.00180,
    1.5: 1.00219,
    1.6: 1.00258,
    1.7: 1.00297,
    1.8: 1.00336,
    1.9: 1.00374,
    2.0: 1.00413,
    2.1: 1.00452,
    2.2: 1.00491,
    2.3: 1.00530,
    2.4: 1.00569,
    2.5: 1.00608,
    2.6: 1.00647,
    2.7: 1.00686,
    2.8: 1.00725,
    2.9: 1.00764,
    3.0: 1.00804,
    3.1: 1.00843,
    3.2: 1.00882,
    3.3: 1.00921,
    3.4: 1.00961,
    3.5: 1.01000,
    3.6: 1.01039,
    3.7: 1.01078,
    3.8: 1.01117,
    3.9: 1.01157,
    4.0: 1.01197,
    4.1: 1.01236,
    4.2: 1.01275,
    4.3: 1.01315,
    4.4: 1.01354,
    4.5: 1.01394,
    4.6: 1.01433,
    4.7: 1.01473,
    4.8: 1.01513,
    4.9: 1.01552,
    5.0: 1.01592,
    5.1: 1.01632,
    5.2: 1.01671,
    5.3: 1.01711,
    5.4: 1.01751,
    5.5: 1.01790,
    5.6: 1.01830,
    5.7: 1.01870,
    5.8: 1.01910,
    5.9: 1.01950,
    6.0: 1.01990,
    6.1: 1.02030,
    6.2: 1.02070,
    6.3: 1.02110,
    6.4: 1.02150,
    6.5: 1.02190,
    6.6: 1.02230,
    6.7: 1.02270,
    6.8: 1.02310,
    6.9: 1.02350,
    7.0: 1.02390,
    7.1: 1.02431,
    7.2: 1.02471,
    7.3: 1.02511,
    7.4: 1.02551,
    7.5: 1.02592,
    7.6: 1.02632,
    7.7: 1.02672,
    7.8: 1.02713,
    7.9: 1.02753,
    8.0: 1.02794,
    8.1: 1.02834,
    8.2: 1.02875,
    8.3: 1.02915,
    8.4: 1.02955,
    8.5: 1.02996,
    8.6: 1.03037,
    8.7: 1.03077,
    8.8: 1.03118,
    8.9: 1.03159,
    9.0: 1.03199,
    9.1: 1.03240,
    9.2: 1.03281,
    9.3: 1.03322,
    9.4: 1.03362,
    9.5: 1.03403,
    9.6: 1.03444,
    9.7: 1.03485,
    9.8: 1.03526,
    9.9: 1.03567,
    10.0: 1.03608,
    10.1: 1.03649,
    10.2: 1.03690,
    10.3: 1.03731,
    10.4: 1.03772,
    10.5: 1.03813,
    10.6: 1.03854,
    10.7: 1.03896,
    10.8: 1.03937,
    10.9: 1.03978,
    11.0: 1.04019,
    11.1: 1.04061,
    11.2: 1.04102,
    11.3: 1.04143,
    11.4: 1.04185,
    11.5: 1.04226,
    11.6: 1.04267,
    11.7: 1.04309,
    11.8: 1.04350,
    11.9: 1.04392,
    12.0: 1.04433,
    12.1: 1.04475,
    12.2: 1.04517,
    12.3: 1.04558,
    12.4: 1.04600,
    12.5: 1.04642,
    12.6: 1.04683,
    12.7: 1.04725,
    12.8: 1.04767,
    12.9: 1.04809,
    13.0: 1.04851,
    13.1: 1.04892,
    13.2: 1.04934,
    13.3: 1.04976,
    13.4: 1.05018,
    13.5: 1.05060,
    13.6: 1.05102,
    13.7: 1.05144,
    13.8: 1.05186,
    13.9: 1.05228,
    14.0: 1.05271,
    14.1: 1.05313,
    14.2: 1.05355,
    14.3: 1.05397,
    14.4: 1.05439,
    14.5: 1.05482,
    14.6: 1.05524,
    14.7: 1.05566,
    14.8: 1.05609,
    14.9: 1.05651,
    15.0: 1.05694,
    15.1: 1.05736,
    15.2: 1.05779,
    15.3: 1.05821,
    15.4: 1.05864,
    15.5: 1.05906,
    15.6: 1.05949,
    15.7: 1.05991,
    15.8: 1.06034,
    15.9: 1.06077,
    16.0: 1.06120,
    16.1: 1.06162,
    16.2: 1.06205,
    16.3: 1.06248,
    16.4: 1.06291,
    16.5: 1.06334,
    16.6: 1.06377,
    16.7: 1.06420,
    16.8: 1.06463,
    16.9: 1.06506,
    17.0: 1.06549,
    17.1: 1.06592,
    17.2: 1.06635,
    17.3: 1.06678,
    17.4: 1.06721,
    17.5: 1.06764,
    17.6: 1.06808,
    17.7: 1.06851,
    17.8: 1.06894,
    17.9: 1.06938,
    18.0: 1.06981,
    18.1: 1.07024,
    18.2: 1.07068,
    18.3: 1.07111,
    18.4: 1.07155,
    18.5: 1.07198,
    18.6: 1.07242,
    18.7: 1.07285,
    18.8: 1.07329,
    18.9: 1.07373,
    19.0: 1.07417,
    19.1: 1.07460,
    19.2: 1.07504,
    19.3: 1.07548,
    19.4: 1.07592,
    19.5: 1.07635,
    19.6: 1.07679,
    19.7: 1.07723,
    19.8: 1.07767,
    19.9: 1.07811,
    20.0: 1.07855,
    20.1: 1.07899,
    20.2: 1.07943,
    20.3: 1.07987,
    20.4: 1.08032,
    20.5: 1.08076,
    20.6: 1.08120,
    20.7: 1.08164,
    20.8: 1.08208,
    20.9: 1.08253,
    21.0: 1.08297,
    21.1: 1.08342,
    21.2: 1.08386,
    21.3: 1.08430,
    21.4: 1.08475,
    21.5: 1.08519,
    21.6: 1.08564,
    21.7: 1.08608,
    21.8: 1.08653,
    21.9: 1.08698,
    22.0: 1.08745,
    22.1: 1.08787,
    22.2: 1.08832,
    22.3: 1.08877,
    22.4: 1.08922,
    22.5: 1.08966,
    22.6: 1.09011,
    22.7: 1.09056,
    22.8: 1.09101,
    22.9: 1.09146,
    23.0: 1.09191,
    23.1: 1.09236,
    23.2: 1.09281,
    23.3: 1.09327,
    23.4: 1.09372,
    23.5: 1.09417,
    23.6: 1.09462,
    23.7: 1.09507,
    23.8: 1.09553,
    23.9: 1.09598,
    24.0: 1.09643,
    24.1: 1.09689,
    24.2: 1.09734,
    24.3: 1.09780,
    24.4: 1.09825,
    24.5: 1.09871,
    24.6: 1.09916,
    24.7: 1.09962,
    24.8: 1.10007,
    24.9: 1.10053,
    25.0: 1.10099,
    }
